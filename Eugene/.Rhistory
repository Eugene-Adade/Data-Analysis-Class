-coronary_artery_disease, -pedal_edema,
-white_blood_cell_count,
-red_blood_cell_count, -pack_cell_volume)
#renaming of columns
copy_main_data <- copy_main_data %>% rename(appetite = new_appetite,
class = new_class,
pedal_edema = new_pedal_edema,
red_blood_cell_count = new_red_blood_cell_count,
white_blood_cell_count = new_white_blood_cell_count,
coronary_artery_disease = new_coronary_artery_disease,
pack_cell_volume = new_pack_cell_volume)
#removing old columns and renaming new columns
main_data <- main_data %>% select(-diabetes_melitus, -appetite, -class,
-coronary_artery_disease, -pedal_edema,
-white_blood_cell_count,
-red_blood_cell_count, -pack_cell_volume) %>%
rename(appetite = new_appetite,
class = new_class,
pedal_edema = new_pedal_edema,
red_blood_cell_count = new_red_blood_cell_count,
white_blood_cell_count = new_white_blood_cell_count,
coronary_artery_disease = new_coronary_artery_disease,
pack_cell_volume = new_pack_cell_volume)
#checking stucture of dataset
str(main_data)
#assigning specific data types to variables
main_data <- main_data %>%
mutate(spesific_gravity = factor(spesific_gravity, levels = c("1.005",
"1.010",
"1.015",
"1.020",
"1.025")))
#checking stucture of dataset
str(main_data)
View(main_data)
View(copy_main_data)
main_data <- copy_main_data
main_data <- main_data %>%
mutate(spesific_gravity = factor(spesific_gravity, levels = c(1.005,
1.010,
1.015,
1.020,
1.025)))
View(main_data)
#checking stucture of dataset
str(main_data)
#assigning factor data type to variable albumin
main_data <- main_data %>%
mutate(albumin = factor(albumin, levels = c(0, 1, 2, 3, 4, 5)))
#checking stucture of dataset
str(main_data)
#Assignment 2
#load library tidyverse
library(tidyverse)
#list all unique values of the variable columns
cat_col <- names(main_data)[sapply(main_data, function(x) is.character(x))]
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
#correcting values in pack_cell_volume
main_data <- main_data %>% mutate(
new_pack_cell_volume = case_when(
pack_cell_volume == "\t?" ~ "NA",
pack_cell_volume == "\t43" ~ "43",
.default = pack_cell_volume
)
)
#select and filter pack_cell_volume and new_pack_cell_volume
main_data %>% select(pack_cell_volume, new_pack_cell_volume) %>%
filter(pack_cell_volume %in% c("\t?", "\t43"))
#correcting values in white_blood_cell_count
main_data <- main_data %>% mutate(
new_white_blood_cell_count = case_when(
white_blood_cell_count == "\t6200" ~ "6200",
white_blood_cell_count == "\t8400" ~ "8400",
white_blood_cell_count == "\t?" ~ "NA",
.default = white_blood_cell_count
)
)
#selecting and filtering white_blood_cell count and new_white_blood_cell_count
main_data %>% select(white_blood_cell_count, new_white_blood_cell_count) %>%
filter(white_blood_cell_count %in% c("\t6200", "\t8400", "\t?"))
#correcting values in red_blood_cell_count
main_data <- main_data %>% mutate(
new_red_blood_cell_count = case_when(
red_blood_cell_count == "\t?" ~ "NA",
.default = red_blood_cell_count
)
)
#selecting and filtering red_blood_cell_count and new_red_blood_cell_count
main_data %>% select(red_blood_cell_count, new_red_blood_cell_count) %>%
filter(red_blood_cell_count %in% c("\t?"))
#correcting values in coronary_artery_disease
main_data <- main_data %>% mutate(
new_coronary_artery_disease = case_when(
coronary_artery_disease == "\tno" ~ "no",
.default = coronary_artery_disease
)
)
#selecting and filtering coronary_artery_disease and new_coronary_artery_disease
main_data %>% select(coronary_artery_disease, new_coronary_artery_disease) %>%
filter(coronary_artery_disease %in% c("\tno"))
#correcting values in appetite
main_data <- main_data %>% mutate(
new_appetite = case_when(
appetite == "no" ~ "NA",
.default = appetite
)
)
#selecting and filtering appetite and new_appetite
main_data %>% select(appetite, new_appetite) %>%
filter(appetite %in% c("no"))
#correcting values in pedal_edema
main_data <- main_data %>% mutate(
new_pedal_edema = case_when(
pedal_edema == "good" ~ "NA",
.default = pedal_edema
)
)
#selecting and filtering pedal_edema
main_data %>% select(pedal_edema, new_pedal_edema) %>%
filter(pedal_edema %in% c("good"))
#correcting values in class
main_data <- main_data %>% mutate(
new_class = case_when(
class == "ckd\t" ~ "ckd",
class == "ckd," ~ "ckd",
class == "no,notckd" ~ "notckd",
.default = class
)
)
#selecting and filtering class
main_data %>% select(class, new_class) %>%
filter(class %in% c("ckd\t", "ckd,", "no,notckd"))
#end of Assignment 2
#A copy of the main dataset
copy_main_data <- main_data
#removing old columns
copy_main_data <- copy_main_data %>% select(-diabetes_melitus, -appetite, -class,
-coronary_artery_disease, -pedal_edema,
-white_blood_cell_count,
-red_blood_cell_count, -pack_cell_volume)
#renaming of columns
copy_main_data <- copy_main_data %>% rename(appetite = new_appetite,
class = new_class,
pedal_edema = new_pedal_edema,
red_blood_cell_count = new_red_blood_cell_count,
white_blood_cell_count = new_white_blood_cell_count,
coronary_artery_disease = new_coronary_artery_disease,
pack_cell_volume = new_pack_cell_volume)
#removing old columns and renaming new columns
main_data <- main_data %>% select(-diabetes_melitus, -appetite, -class,
-coronary_artery_disease, -pedal_edema,
-white_blood_cell_count,
-red_blood_cell_count, -pack_cell_volume) %>%
rename(appetite = new_appetite,
class = new_class,
pedal_edema = new_pedal_edema,
red_blood_cell_count = new_red_blood_cell_count,
white_blood_cell_count = new_white_blood_cell_count,
coronary_artery_disease = new_coronary_artery_disease,
pack_cell_volume = new_pack_cell_volume)
#checking stucture of dataset
str(main_data)
#assigning specific data types to variables
main_data <- main_data %>%
mutate(spesific_gravity = factor(spesific_gravity, levels = c("1.005",
"1.010",
"1.015",
"1.020",
"1.025")))
main_data <- copy_main_data
main_data <- main_data %>%
mutate(spesific_gravity = factor(spesific_gravity, levels = c(1.005,
1.010,
1.015,
1.020,
1.025)))
#assigning factor data type to variable albumin
main_data <- main_data %>%
mutate(albumin = factor(albumin, levels = c(0, 1, 2, 3, 4, 5)))
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
#installing library readxl
library(readxl)
#list all unique values of the numeric variable columns
cat_col <- names(main_data)[sapply(main_data, function(x) is.numeric(x))]
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
install.packages(readxl)
install.packages("readxl")
data <- read_excel("./data/data/data.xlsx")
data <- read_excel(".Data-Analysis-Class/data/data/data.xlsx")
data <- read_excel(".Data-Analysis-Class/data/data/data.xlsx")
data <- read_excel("./Data-Analysis-Class/data/data/data.xlsx")
data <- read_excel("./data/data/data.xlsx")
View(data)
library(tidyverse)
#pivot the data from wide to long
data1 <- data %>% pivot_longer(
cols = starts_with("day"),
names_to = "days",
values_to = "diameter",
values_drop_na = F
)
View(data1)
View(data1)
# Renaming the values in the days column into its independent values
data1 <- data1 %>% mutate(
days1 = case_when(
str_starts(days, "day0") ~ "day0",
str_starts(days, "day3") ~ "day3"
str_starts(days, "day6") ~ "day6"
# Renaming the values in the days column into its independent values
data1 <- data1 %>% mutate(days1 = case_when(
str_starts(days, "day0") ~ "day0",
str_starts(days, "day3") ~ "day3"
str_starts(days, "day6") ~ "day6"
# Renaming the values in the days column into its independent values
data1 <- data1 %>% mutate(days1 = case_when(
str_starts(days, "day0") ~ "day0",
str_starts(days, "day3") ~ "day3",
str_starts(days, "day6") ~ "day6",
str_starts(days, "day9") ~ "day9",
str_starts(days, "day12") ~ "day12",
str_starts(days, "day14") ~ "day14",
.default = days
)
)
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red")
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red")
#loading libraries
library(tidyverse)
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red")
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red") +
labs(title = "Distribution of sepal.length")
#loading libraries
library(tidyverse)
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red") +
labs(title = "Distribution of sepal.length")
#selecting column sepal.length
iris$Sepal.Length
str(iris)
#visualizing a distribution of a variable using the density geometry
iris %>%
ggplot(aes(x = Sepal.Length))+
geom_density(color = "black",
fill = "red")
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, aes(x = Sepal.Lenght),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, aes(x = Sepal.width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, aes(x = Petal.Lenght),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, aes(x = Petal.width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Lenght),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Lenght),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Lenght),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Lenght),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.Width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.Width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue",
alpha = 0) +
geom_density(iris, mapping = aes(x = Sepal.Width),
color = "black",
fill = "green",
alpha = 0) +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow",
alpha = 0) +
geom_density(iris, mapping = aes(x = Petal.Width),
color = "black",
fill = "violet",
alpha = 0)
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue") +
geom_density(iris, mapping = aes(x = Sepal.Width),
color = "black",
fill = "green") +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow") +
geom_density(iris, mapping = aes(x = Petal.Width),
color = "black",
fill = "violet")
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue") +
geom_density(iris, mapping = aes(x = Sepal.Width),
color = "black",
fill = "green") +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow") +
geom_density(iris, mapping = aes(x = Petal.Width),
color = "black",
fill = "violet") +
xlab("blue:Sepal.Length")
#visualisalizing the distribution of multiple variables using the density geometry
ggplot() +
geom_density(iris, mapping = aes(x = Sepal.Length),
color = "black",
fill = "blue",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Sepal.Width),
color = "black",
fill = "green",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Length),
color = "black",
fill = "yellow",
alpha = 0.2) +
geom_density(iris, mapping = aes(x = Petal.Width),
color = "black",
fill = "violet",
alpha = 0.2)
#visualization of categorical variables
iris %>%
ggplot(aes(x = Species))+
geom_bar()
set.seed(123)
prob <- c(.2, .3, .4, .1)
set.seed(123)
groups <- paste("groups", 1:4, sep = " ")
groups
prob <- c(.2, .3, .4, .1)
prob
df <- sample(groups, 1000, T, prob) %>%
tibble(groups = .)
View(df)
df %>% ggplot(aes(x = groups))+
geom_bar()
View(df)
df %>%
group_by(groups) %>%
summarise(frequency = n())
df.data <- df %>%
group_by(groups) %>%
summarise(frequency = n())
df.data %>%
ggplot(aes(x = groups))+
geom_bar()
df.data %>%
ggplot(aes(x = groups, y = frequency))+
geom_bar()
df.data %>%
ggplot(aes(x = groups, y = frequency))+
geom_bar(stat = "identity")
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red") +
labs(title = "Distribution of sepal.length")
#loading libraries
library(tidyverse)
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red") +
labs(title = "Distribution of sepal.length")
#loading libraries
library(tidyverse)
#plotting the distribution of sepal.length
iris %>% ggplot(aes(x = Sepal.Length))+
geom_histogram(color = "black",
fill = "red") +
labs(title = "Distribution of sepal.length")
#loading libraries
library(tidyverse)
