#load library
library(tidyverse)
#read inline csv files
read_csv('c1,c2,c3
1,a,T
2,b,T
3,c,F')
#read inline csv files
read_csv('c1,c2,c3
1,a,T
2,b,T
3,c,F'
show_col_types = F,
#read inline csv files
read_csv('c1,c2,c3
1,a,T
2,b,T
3,c,F',
show_col_types = F,
col_names = F)
#inline files with meter header
read_csv('first meter line
second meter line
c1,c2,c3
1,a,T
2,b,T
3,c,F',
show_col_types = F,
col_names = F)
#inline files with meter header
read_csv('first meter line
second meter line
c1,c2,c3
1,a,T
2,b,T
3,c,F',
show_col_types = F,
col_names = F,
skip = 2,
comment = '#')
#inline files with meter header
read_csv('first meter line
second meter line
c1,c2,c3
1,a,T
2,b,T
3,c,F',
show_col_types = F,
col_names = T,
skip = 2,
comment = '#')
#inline files with meter header
read_csv('first meter line
second meter line
c1,c2,c3
1,a,F
2,b,F
3,c,F',
show_col_types = T,
col_names = F,
skip = 3,
comment = '#')
#load tidyverse library
library(tidyverse)
#import dataset chronic_kidney_disease_full.arff
df3 <- read_delim(file = "./chronic_kidney_disease_full.arff.txt",
col_names = F,
skip = 145,
na = ?,
#import dataset chronic_kidney_disease_full.arff
df3 <- read_delim(file = "./chronic_kidney_disease_full.arff.txt",
col_names = F,
skip = 145,
na = ?,
#import dataset chronic_kidney_disease_full.arff
df3 <- read_delim(file = "./chronic_kidney_disease_full.arff.txt",
col_names = F,
skip = 145,
delim = ",")
#import dataset chronic_kidney_disease_full.arff
df3 <- read_delim(file = "./chronic_kidney_disease_full.arff (1).txt",
col_names = F,
skip = 145,
delim = ",")
View(df3)
#import dataset chronic_kidney_disease_full.arff
df3 <- read_delim(file = "./chronic_kidney_disease_full.arff (1).txt",
col_names = F,
skip = 145,
delim = ",")
View(df3)
df3 <- read_csv(file = "./chronic_kidney_disease_full.arff (1).txt",
col_names = F,
skip = 145)
df4 <- read_csv(file = "./chronic_kidney_disease_full.arff (1).txt",
col_names = F,
skip = 145)
View(df4)
?read_csv
#correct way to import chronic_kidney_disease_data_full.arff (1)
main_data <- read_delim(file = "./chronic_kidney_disease_full.arff (1).txt",
col_names = F,
delim = ",",
na = c("?","NA"),
skip = 145)
View(main_data)
#renaming columns
colnames(main_data)
install.packages("janitor")
#renaming columns
colnames(main_data) <- c("age", "blood pressure", "spesific gravity", "albumin",
"sugar", "red blood cells", "pus cell", "pus cell clumps",
"bacteria", "blood glucose random", "blood urea", "serum creatine",
"sodium", "potassium", "hemoglobin", "pack cell volume", "white blood cell count",
"red blood cell count", "hypertension", "diabetes melitus", "coronary artery disease",
"appetite", "pedal edema", "anemia", "class")
View(main_data)
#creating a copy of the main dataset
df1 <- main_data
#clean variable names
library(janitor)
clean_names(main_data)
main_data %>% clean_names()
main_data <-  main_data %>% clean_names()
colnames(main_data)
colnames(df1)
#selecting variables
main_data %>% select(age, blood_pressure)
df1 %>% select(age, `blood pressure`)
View(main_data)
#display unique values in categorical columns
cat_col <- names(main_data)[sapply(main_data, function(x) is.character(x))]
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
names(main_data)
is.character(main_data$age)
cat_col
print(x)
for (x in num) {
print(x)
}
for (x in num) {
print(x)
}
num <- 1:5
for (x in num) {
print(x)
}
num
cat_col
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
)
)
#correct values in the diabetes column
main_data <- main_data %>% mutate(
new_diabetes_mellitus = case_when(
diabetes_melitus == " yes" ~ "yes",
diabetes_melitus == "\tno" ~ "no",
diabetes_melitus == "\tyes" ~ "yes",
diabetes_melitus == "" ~ NA,
.default = diabetes_melitus
)
)
)
#correct values in the diabetes column
main_data <- main_data %>% mutate(
new_diabetes_mellitus = case_when(
diabetes_melitus == " yes" ~ "yes",
diabetes_melitus == "\tno" ~ "no",
diabetes_melitus == "\tyes" ~ "yes",
diabetes_melitus == "" ~ NA,
.default = diabetes_melitus
))
library(tidyverse)
#correct values in the diabetes column
main_data <- main_data %>% mutate(
new_diabetes_mellitus = case_when(
diabetes_melitus == " yes" ~ "yes",
diabetes_melitus == "\tno" ~ "no",
diabetes_melitus == "\tyes" ~ "yes",
diabetes_melitus == "" ~ NA,
.default = diabetes_melitus
))
View(main_data)
x <- select(main_data, diabetes_mellitus, new_diabetes_mellitus)
x <- select(main_data, diabetes_mellitus, new_diabetes_mellitus)
library(tidyverse)
x <- select(main_data, diabetes_mellitus, new_diabetes_mellitus)
View(main_data)
x <- select(main_data, diabetes_melitus, new_diabetes_mellitus)
filter(x, diabetes_melitus %in% c(" yes", "\tno", "\tyes", ""))
x <- select(main_data, diabetes_melitus, new_diabetes_mellitus)
#load tidyverse library
library(tidyverse)
#correct way to import chronic_kidney_disease_data_full.arff (1)
main_data <- read_delim(file = "./chronic_kidney_disease_full.arff (1).txt",
col_names = F,
delim = ",",
na = c("?","NA"),
skip = 145)
#renaming columns
colnames(main_data) <- c("age", "blood pressure", "spesific gravity", "albumin",
"sugar", "red blood cells", "pus cell", "pus cell clumps",
"bacteria", "blood glucose random", "blood urea", "serum creatine",
"sodium", "potassium", "hemoglobin", "pack cell volume", "white blood cell count",
"red blood cell count", "hypertension", "diabetes melitus", "coronary artery disease",
"appetite", "pedal edema", "anemia", "class")
#creating a copy of the main dataset
df1 <- main_data
#clean variable names
library(janitor)
clean_names(main_data)
main_data <-  main_data %>% clean_names()
colnames(main_data)
colnames(df1)
#selecting variables
main_data %>% select(age, blood_pressure)
df1 %>% select(age, `blood pressure`)
#display unique values in categorical columns
cat_col <- names(main_data)[sapply(main_data, function(x) is.character(x))]
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
num <- 1:5
for (x in num) {
print(x)
}
#correct values in the diabetes column
main_data <- main_data %>% mutate(
new_diabetes_mellitus = case_when(
diabetes_melitus == " yes" ~ "yes",
diabetes_melitus == "\tno" ~ "no",
diabetes_melitus == "\tyes" ~ "yes",
diabetes_melitus == "" ~ NA,
.default = diabetes_melitus
))
library(tidyverse)
x <- select(main_data, diabetes_melitus, new_diabetes_mellitus)
filter(x, diabetes_melitus %in% c(" yes", "\tno", "\tyes", ""))
main_data %>% select(diabetes_melitus, new_diabetes_mellitus) %>%
filter()
filter(x, diabetes_melitus %in% c(" yes", "\tno", "\tyes", ""))
unique(main_data$new_diabetes_mellitus)
main_data %>% select(diabetes_melitus, new_diabetes_mellitus) %>%
filter(diabetes_melitus %in% c(" yes", "\tno", "\tyes", ""))
View(x)
#Assignment 2
#load library tidyverse
library(tidyverse)
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
#correcting values in pack_cell_volume
main_data <- main_data %>% mutate(
new_pack_cell_volume = case_when(
pack_cell_volume == "\t?" ~ "NA",
pack_cell_volume == "\t43" ~ "43",
.default = pack_cell_volume
)
)
View(main_data)
#select and filter pack_cell_volume and new_pack_cell_volume
main_data %>% select(pack_cell_volume, new_pack_cell_volume) %>%
filter(pack_cell_volume %in% c("\t?", "\t43"))
#correcting values in white_blood_cell_count
main_data <- main_data %>% mutate(
new_white_blood_cell_count = case_when(
white_blood_cell_count == "\t6200" ~ "6200",
white_blood_cell_count == "\t8400" ~ "8400",
white_blood_cell_count == "\t?" ~ "NA",
.default = white_blood_cell_count
)
)
#selecting and filtering white_blood_cell count and new_white_blood_cell_count
main_data <- select(white_blood_cell_count, new_white_blood_cell_count) %>%
filter(white_blood_cell_count %in% c("\t6200", "\t8400", "\t?"))
#selecting and filtering white_blood_cell count and new_white_blood_cell_count
main_data <- select(white_blood_cell_count, new_white_blood_cell_count) %>%
filter(white_blood_cell_count %in% c("\t6200", "\t8400", "\t?"))
View(main_data)
#selecting and filtering white_blood_cell count and new_white_blood_cell_count
main_data %>% select(white_blood_cell_count, new_white_blood_cell_count) %>%
filter(white_blood_cell_count %in% c("\t6200", "\t8400", "\t?"))
#correcting values in red_blood_cell_count
main_data <- main_data %>% mutate(
new_red_blood_cell_count = case_when(
red_blood_cell_count == "\t?" ~ "NA",
.default = red_blood_cell_count
)
)
#selecting and filtering red_blood_cell_count and new_red_blood_cell_count
main_data %>% select(red_blood_cell_count, new_red_blood_cell_count) %>%
filter(red_blood_cell_count %in% c("\t?"))
#correcting values in coronary_artery_disease
main_data <- main_data %>% mutate(
new_coronary_artery_disease = case_when(
coronary_artery_disease == "\tno" ~ "no",
.default = coronary_artery_disease
)
)
#selecting and filtering coronary_artery_disease and new_coronary_artery_disease
main_data %>% select(coronary_artery_disease, new_coronary_artery_disease) %>%
filter(coronary_artery_disease %in% c("\tno"))
#correcting values in appetite
main_data <- main_data %>% mutate(
new_appetite = case_when(
appetite == "no" ~ "NA",
.default = appetite
)
)
#selecting and filtering appetite and new_appetite
main_data %>% select(appetite, new_appetite) %>%
filter(appetite %in% c("no"))
#correcting values in pedal_edema
main_data <- main_data %>% mutate(
new_pedal_edema = case_when(
pedal_edema == "good" ~ "NA",
.default = pedal_edema
)
)
#selecting and filtering pedal_edema
main_data %>% select(pedal_edema, new_pedal_edema) %>%
filter(pedal_edema %in% c("good"))
#correcting values in class
main_data <- main_data %>% mutate(
new_class = case_when(
class == "ckd\t" ~ "ckd",
class == "ckd," ~ "ckd",
class == "no,notckd" ~ "notckd",
.default = class
)
)
#selecting and filtering class
main_data %>% select(class, new_class) %>%
filter(class %in% c("ckd\t", "ckd,", "no,notckd"))
#Assignment 2
#load library tidyverse
library(tidyverse)
#list all unique values of the variable columns
cat_col <- names(main_data)[sapply(main_data, function(x) is.character(x))]
for (col in cat_col) {
cat(paste(col, "has", unique(main_data[col]), "values\n"))
}
#correcting values in pack_cell_volume
main_data <- main_data %>% mutate(
new_pack_cell_volume = case_when(
pack_cell_volume == "\t?" ~ "NA",
pack_cell_volume == "\t43" ~ "43",
.default = pack_cell_volume
)
)
#select and filter pack_cell_volume and new_pack_cell_volume
main_data %>% select(pack_cell_volume, new_pack_cell_volume) %>%
filter(pack_cell_volume %in% c("\t?", "\t43"))
#correcting values in white_blood_cell_count
main_data <- main_data %>% mutate(
new_white_blood_cell_count = case_when(
white_blood_cell_count == "\t6200" ~ "6200",
white_blood_cell_count == "\t8400" ~ "8400",
white_blood_cell_count == "\t?" ~ "NA",
.default = white_blood_cell_count
)
)
#selecting and filtering white_blood_cell count and new_white_blood_cell_count
main_data %>% select(white_blood_cell_count, new_white_blood_cell_count) %>%
filter(white_blood_cell_count %in% c("\t6200", "\t8400", "\t?"))
#correcting values in red_blood_cell_count
main_data <- main_data %>% mutate(
new_red_blood_cell_count = case_when(
red_blood_cell_count == "\t?" ~ "NA",
.default = red_blood_cell_count
)
)
#selecting and filtering red_blood_cell_count and new_red_blood_cell_count
main_data %>% select(red_blood_cell_count, new_red_blood_cell_count) %>%
filter(red_blood_cell_count %in% c("\t?"))
#correcting values in coronary_artery_disease
main_data <- main_data %>% mutate(
new_coronary_artery_disease = case_when(
coronary_artery_disease == "\tno" ~ "no",
.default = coronary_artery_disease
)
)
#selecting and filtering coronary_artery_disease and new_coronary_artery_disease
main_data %>% select(coronary_artery_disease, new_coronary_artery_disease) %>%
filter(coronary_artery_disease %in% c("\tno"))
#correcting values in appetite
main_data <- main_data %>% mutate(
new_appetite = case_when(
appetite == "no" ~ "NA",
.default = appetite
)
)
#selecting and filtering appetite and new_appetite
main_data %>% select(appetite, new_appetite) %>%
filter(appetite %in% c("no"))
#correcting values in pedal_edema
main_data <- main_data %>% mutate(
new_pedal_edema = case_when(
pedal_edema == "good" ~ "NA",
.default = pedal_edema
)
)
#selecting and filtering pedal_edema
main_data %>% select(pedal_edema, new_pedal_edema) %>%
filter(pedal_edema %in% c("good"))
#correcting values in class
main_data <- main_data %>% mutate(
new_class = case_when(
class == "ckd\t" ~ "ckd",
class == "ckd," ~ "ckd",
class == "no,notckd" ~ "notckd",
.default = class
)
)
#selecting and filtering class
main_data %>% select(class, new_class) %>%
filter(class %in% c("ckd\t", "ckd,", "no,notckd"))
#A copy of the main dataset
copy_main_data <- main_data
#removing old columns
copy_main_data <- copy_main_data %>% select(-diabetes_melitus, -appetite, -class,
-coronary_artery_disease, -pedal_edema,
-white_blood_cell_count,
-red_blood_cell_count, -pack_cell_volume)
#renaming of columns
copy_main_data <- copy_main_data %>% rename(appetite = new_appetite,
class = new_class,
pedal_edema = new_pedal_edema,
red_blood_cell_count = new_red_blood_cell_count,
white_blood_cell_count = new_white_blood_cell_count,
coronary_artery_disease = new_coronary_artery_disease,
pack_cell_volume = new_pack_cell_volume)
#removing old columns and renaming new columns
main_data <- main_data %>% select(-diabetes_melitus, -appetite, -class,
-coronary_artery_disease, -pedal_edema,
-white_blood_cell_count,
-red_blood_cell_count, -pack_cell_volume) %>%
rename(appetite = new_appetite,
class = new_class,
pedal_edema = new_pedal_edema,
red_blood_cell_count = new_red_blood_cell_count,
white_blood_cell_count = new_white_blood_cell_count,
coronary_artery_disease = new_coronary_artery_disease,
pack_cell_volume = new_pack_cell_volume)
#checking stucture of dataset
str(main_data)
#assigning specific data types to variables
main_data <- main_data %>%
mutate(spesific_gravity = factor(spesific_gravity, levels = c("1.005",
"1.010",
"1.015",
"1.020",
"1.025")))
#checking stucture of dataset
str(main_data)
View(main_data)
View(copy_main_data)
main_data <- copy_main_data
main_data <- main_data %>%
mutate(spesific_gravity = factor(spesific_gravity, levels = c(1.005,
1.010,
1.015,
1.020,
1.025)))
View(main_data)
#checking stucture of dataset
str(main_data)
#assigning factor data type to variable albumin
main_data <- main_data %>%
mutate(albumin = factor(albumin, levels = c(0, 1, 2, 3, 4, 5)))
#checking stucture of dataset
str(main_data)
